class Solution {
public:
     void dfs(int src, vector<int>& vis, vector<int>& at, vector<int> adj[], int& maxi, int& time)
    {
        for(auto it : adj[src])
        {
            if(!vis[it])
            {
                vis[it]=1;
                at[it]=time++;
                dfs(it, vis, at, adj, maxi, time);
                vis[it]=2;
            }
            else if(vis[it]==1)
                maxi=max(maxi, time-at[it]);
        }
    }
    int longestCycle(vector<int>& edges) 
    {
        int n=edges.size();
        vector<int> adj[n];
        for(int i=0; i<n; i++)
        {
            if(edges[i]!=-1)
                adj[i].push_back(edges[i]);
        }
        vector<int> vis(n,0), at(n,0);
        int time=0, maxi=-1;
        for(int i=0; i<n; i++)
        {
            if(!vis[i])
            {   vis[i]=1;
                at[i]=time++;
                dfs(i, vis, at, adj, maxi, time);
                vis[i]=2;
            }
        }
        return maxi;
    }
};
