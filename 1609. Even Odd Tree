/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isEvenOddTree(TreeNode* root) {
        
        int level=0,n;
        queue<TreeNode*> q;
        q.push(root);
        TreeNode* node;
        while(!q.empty()){
            n=q.size();
            vector<int> temp;
            
            for(int i=0;i<n;++i){
                node=q.front();
                q.pop();
                temp.push_back(node->val);
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            if((level & 1)==0){
                if((temp[0] & 1)==0) return false;
                for(int i=1;i<temp.size();++i){
                    if(temp[i]<=temp[i-1] || (temp[i] & 1) ==0) return false;
                }

            }
            else{
                if((temp[0] & 1)==1) return false;
                for(int i=1;i<temp.size();++i){
                    if(temp[i]>=temp[i-1] || (temp[i] & 1) ==1) return false;
                }

            }
            ++level;

        }
        return true;
    }
};
